from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from .keyboards import main_kb, get_cities_keyboard, PAGE_SIZE, TEXT_SET_CITY, TEXT_WEATHER, TEXT_SHOW_CITY, CANCEL_KB, CANCEL_TEXT, get_popular_cities_keyboard, get_weather_image_keyboard, SHOW_IMAGE_CALLBACK
from .states import CitySelectStates
from .api import api_post, get_weather_image, get_weather_image_by_city
import asyncio
from rich import print as rich_print
from aiogram.filters import ExceptionTypeFilter
from aiogram.exceptions import TelegramBadRequest
from aiogram.types.input_file import BufferedInputFile
from aiogram.types import InputMediaPhoto

router = Router()

@router.message(F.text == "/start")
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    print("DEBUG TEXT_WEATHER:", TEXT_WEATHER)
    print("DEBUG main_kb:", main_kb)
    info = await api_post("/user/start", {"user_id": message.from_user.id})
    text = info.get("text")
    video_url = "https://i.imgur.com/LJdfKwu.mp4"
    if text:
        await message.answer_animation(animation=video_url, caption=text, reply_markup=main_kb)
    else:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.", reply_markup=main_kb)

@router.message(F.text == TEXT_SET_CITY)
async def set_city_start(message: types.Message, state: FSMContext):
    data = await state.get_data()
    cancel_msg_id = data.get("cancel_msg_id")
    prev_user_msg_id = data.get("user_msg_id")
    try:
        if cancel_msg_id:
            await message.bot.delete_message(message.chat.id, cancel_msg_id)
    except Exception:
        pass
    try:
        if prev_user_msg_id:
            await message.bot.delete_message(message.chat.id, prev_user_msg_id)
    except Exception:
        pass
    user_id = message.from_user.id
    await state.update_data(user_msg_id=message.message_id)
    sent = await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:",
        reply_markup=CANCEL_KB
    )
    await state.set_state(CitySelectStates.waiting_for_city_name)
    await state.update_data(cancel_msg_id=sent.message_id)

@router.callback_query(F.data == "cancel_city", CitySelectStates.waiting_for_city_name)
async def cancel_city_handler(callback: types.CallbackQuery, state: FSMContext):
    rich_print(f"[green]Callback: {callback.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}[/green]")
    await callback.answer("OK")
    if not callback.message:
        await state.clear()
        await state.update_data(cancel_msg_id=None)
        return
    fsm_data = await state.get_data()
    cancel_msg_id = fsm_data.get("cancel_msg_id")
    chat_id = callback.message.chat.id
    bot = callback.message.bot
    if cancel_msg_id:
        try:
            await bot.edit_message_text(
                text="‚ùå–°–º–µ–Ω–∞ –≥–æ—Ä–æ–¥–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞",
                chat_id=chat_id,
                message_id=cancel_msg_id
            )
            await asyncio.sleep(1)
            await bot.delete_message(chat_id, cancel_msg_id)
        except Exception:
            pass
    else:
        # fallback: –µ—Å–ª–∏ cancel_msg_id –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        cancel_msg = await bot.send_message(chat_id, "‚ùå–°–º–µ–Ω–∞ –≥–æ—Ä–æ–¥–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        await asyncio.sleep(1)
        try:
            await bot.delete_message(chat_id, cancel_msg.message_id)
        except Exception:
            pass
    await state.clear()
    await state.update_data(cancel_msg_id=None)

@router.message(CitySelectStates.waiting_for_city_name)
async def city_search_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip()
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –æ—Å–Ω–æ–≤–Ω—É—é –∫–Ω–æ–ø–∫—É ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º FSM –∏ –≤—ã–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä
    if text in [TEXT_WEATHER, TEXT_SHOW_CITY, TEXT_SET_CITY, "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞", "/start", "/help"]:
        fsm_data = await state.get_data()
        cancel_msg_id = fsm_data.get("cancel_msg_id")
        if cancel_msg_id:
            try:
                await message.bot.edit_message_text(
                    text="‚ùå–°–º–µ–Ω–∞ –≥–æ—Ä–æ–¥–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞",
                    chat_id=message.chat.id,
                    message_id=cancel_msg_id
                )
                await asyncio.sleep(1)
                await message.bot.delete_message(message.chat.id, cancel_msg_id)
            except Exception:
                pass
        else:
            # fallback: –µ—Å–ª–∏ cancel_msg_id –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            cancel_msg = await message.answer("‚ùå–°–º–µ–Ω–∞ –≥–æ—Ä–æ–¥–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
            await asyncio.sleep(1)
            try:
                await cancel_msg.delete()
            except Exception:
                pass
        await state.clear()
        # –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä
        if text == TEXT_WEATHER:
            await weather_handler(message, state)
        elif text == TEXT_SHOW_CITY:
            await show_city_handler(message, state)
        elif text == TEXT_SET_CITY:
            await set_city_start(message, state)
        elif text == "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞":
            await popular_cities_handler(message, state)
        elif text == "/start":
            await cmd_start(message, state)
        elif text == "/help":
            await help_handler(message, state)
        return
    # ... –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–∞ ...
    query = text
    page = 1
    data = await api_post("/city/search", {"user_id": user_id, "query": query, "page": page, "page_size": PAGE_SIZE})
    cities = data.get("cities", [])
    has_next = data.get("has_next", False)
    if not cities:
        await message.answer("–ì–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    kb = get_cities_keyboard(cities, has_next, page, query)
    fsm_data = await state.get_data()
    cancel_msg_id = fsm_data.get("cancel_msg_id")
    if cancel_msg_id:
        try:
            await message.bot.edit_message_text(
                text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
                chat_id=message.chat.id,
                message_id=cancel_msg_id,
                reply_markup=kb
            )
        except Exception:
            sent = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=kb)
            await state.update_data(cancel_msg_id=sent.message_id)
    else:
        sent = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=kb)
        await state.update_data(cancel_msg_id=sent.message_id)

@router.callback_query(F.data.startswith("city_"), CitySelectStates.waiting_for_city_name)
async def city_choose_handler(callback: types.CallbackQuery, state: FSMContext):
    rich_print(f"[green]Callback: {callback.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}[/green]")
    await callback.answer("OK")
    user_id = callback.from_user.id
    parts = callback.data.split("_", 3)
    city_id = int(parts[1])
    page = int(parts[2])
    query = parts[3]
    await api_post("/user/city", {"user_id": user_id, "city_id": city_id})
    data = await api_post("/city/search", {"user_id": user_id, "query": query, "page": page, "page_size": PAGE_SIZE})
    cities = data.get("cities", [])
    city_name = next((c["name"] for c in cities if int(c["id"]) == city_id), None)
    if city_name:
        await callback.message.edit_text(f"{city_name} ‚Äî üëÄ —è —ç—Ç–æ –∑–∞–ø–∏—à—É ‚úçÔ∏è", reply_markup=None)
    else:
        await callback.message.edit_text("–ì–æ—Ä–æ–¥ –≤—ã–±—Ä–∞–Ω!", reply_markup=None)
    await state.clear()
    await asyncio.sleep(1)
    try:
        await callback.message.delete()
    except Exception:
        pass
    await state.update_data(cancel_msg_id=None)
    weather = await api_post("/weather", {"user_id": user_id})
    if weather.get("success"):
        await callback.message.answer(
            weather["formatted_message"],
            reply_markup=get_weather_image_keyboard()
        )
    else:
        await callback.message.answer(
            weather.get("error", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã")
        )

@router.callback_query(F.data.startswith("page_"), CitySelectStates.waiting_for_city_name)
async def city_pagination_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("OK")
    user_id = callback.from_user.id
    parts = callback.data.split("_", 2)
    page = int(parts[1])
    query = parts[2]
    data = await api_post("/city/search", {"user_id": user_id, "query": query, "page": page, "page_size": PAGE_SIZE})
    cities = data.get("cities", [])
    has_next = data.get("has_next", False)
    kb = get_cities_keyboard(cities, has_next, page, query)
    await callback.message.edit_reply_markup(reply_markup=kb)

@router.message(F.text == TEXT_WEATHER)
async def weather_handler(message: types.Message, state: FSMContext):
    await state.clear()
    rich_print(f"[green]–ü–æ–≥–æ–¥–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–≥–æ–¥—É[/green]")
    user_id = message.from_user.id
    data = await api_post("/weather", {"user_id": user_id})
    if data.get("success"):
        await message.answer(
            data["formatted_message"],
            reply_markup=get_weather_image_keyboard()
        )
    else:
        await message.answer(data.get("error", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã"))

@router.message(F.text == TEXT_SHOW_CITY)
async def show_city_handler(message: types.Message, state: FSMContext):
    await state.clear()
    rich_print(f"[green]–£–∑–Ω–∞—Ç—å –≥–æ—Ä–æ–¥: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–π –≥–æ—Ä–æ–¥[/green]")
    user_id = message.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ API
    data = await api_post("/weather", {"user_id": user_id})
    if data.get("success") and data.get("raw_data"):
        city = data["raw_data"].get("location", {}).get("name")
        country = data["raw_data"].get("location", {}).get("country")
        if city and country:
            await message.answer(f"–¢–≤–æ–π –≥–æ—Ä–æ–¥: {city}, {country}")
        elif city:
            await message.answer(f"–¢–≤–æ–π –≥–æ—Ä–æ–¥: {city}")
        else:
            await message.answer("–ì–æ—Ä–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥.")
    else:
        await message.answer("–ì–æ—Ä–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥.")

@router.message(F.text == "/help")
async def help_handler(message: types.Message, state: FSMContext):
    await state.clear()
    help_text = (
        "–≠—Ç–æ—Ç –±–æ—Ç ‚Äî —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–º –Ω–∞ FastAPI.\n\n"
        "<i>–í—Å—è –ª–æ–≥–∏–∫–∞, —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—ã–Ω–µ—Å–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä.</i>\n\n"
        "<b>–ü–æ—á–µ–º—É —Ç–∞–∫ –ª—É—á—à–µ?</b>\n"
        "‚Ä¢ <b>‚ö° –°–∫–æ—Ä–æ—Å—Ç—å</b> ‚Äî –≤—Å–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –±–æ—Ç –≤—Å–µ–≥–¥–∞ –±—ã—Å—Ç—Ä—ã–π –∏ –æ—Ç–∑—ã–≤—á–∏–≤—ã–π.\n"
        "‚Ä¢ <b>üîÑ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å</b> ‚Äî –ª–µ–≥–∫–æ –ø–æ–¥–∫–ª—é—á–∞—Ç—å –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–∞—Å—à–∏—Ä—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–∞–º–æ–º –±–æ—Ç–µ.\n"
        "‚Ä¢ <b>üõ† –ì–∏–±–∫–æ—Å—Ç—å</b> ‚Äî –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –º–æ–∂–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–∏—Å–∞, –Ω–µ —Ç—Ä–æ–≥–∞—è Telegram.\n\n"
        "<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
        "1. –¢—ã –≤—ã–±–∏—Ä–∞–µ—à—å –≥–æ—Ä–æ–¥ ‚Äî –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä.\n"
        "2. –°–µ—Ä–≤–µ—Ä –∏—â–µ—Ç –≥–æ—Ä–æ–¥, —Ö—Ä–∞–Ω–∏—Ç —Ç–≤–æ–π –≤—ã–±–æ—Ä, –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç.\n"
        "3. –ë–æ—Ç –ø—Ä–æ—Å—Ç–æ –∫—Ä–∞—Å–∏–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n"
        "<i>–ú–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –≤:</i>\n"
        "‚Ä¢ <i>–º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (iOS, Android)</i>\n"
        "‚Ä¢ <i>–¥–µ—Å–∫—Ç–æ–ø–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É (Windows, macOS)</i>\n"
        "‚Ä¢ <i>–±–æ—Ç–∞ –¥–ª—è Telegram –∏–ª–∏ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞</i>\n"
        "‚Ä¢ <i>—Å–∞–π—Ç –∏–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–µ—Ä–≤–∏—Å</i>\n"
        "–í—Å–µ —ç—Ç–∏ –∫–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.\n\n"
        "<b>üí° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –ù–µ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Telegram ‚Äî –≤—Å—ë —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ.\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≥–Ω–æ–∑, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∞–Ω–∞–ª–∏—Ç–∏–∫—É).\n\n"
    )
    await message.answer(help_text)
    gif_url = "https://i.imgur.com/M2tKCc3.mp4"
    await message.answer_animation(gif_url)

@router.message(F.text == "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞")
async def popular_cities_handler(message: types.Message, state: FSMContext):
    await state.clear()
    rich_print(f"[green]–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫[/green]")
    kb = get_popular_cities_keyboard(page=1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=kb)

@router.callback_query(F.data.startswith("popularcity_"))
async def popular_city_weather_handler(callback: types.CallbackQuery):
    city = callback.data[len("popularcity_"):].strip()
    rich_print(f"[green]–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –≥–æ—Ä–æ–¥: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª {city}[/green]")
    await callback.answer("OK")
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞ (—á–µ—Ä–µ–∑ POST /weather/by_city)
    data = await api_post("/weather/by_city", {"city": city})
    if data.get("success"):
        await callback.message.edit_text(
            data["formatted_message"],
            reply_markup=get_weather_image_keyboard(city)
        )
    else:
        await callback.message.edit_text(data.get("error", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã"))

@router.callback_query(F.data.startswith("popularpage_"))
async def popular_cities_pagination_handler(callback: types.CallbackQuery):
    page = int(callback.data[len("popularpage_"):])
    await callback.answer("OK")
    kb = get_popular_cities_keyboard(page=page)
    await callback.message.edit_reply_markup(reply_markup=kb)

@router.callback_query(F.data.startswith("popularforecast_"))
async def popular_city_forecast_handler(callback: types.CallbackQuery):
    city = callback.data[len("popularforecast_"):].strip()
    rich_print(f"[green]–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –≥–æ—Ä–æ–¥: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ {city}[/green]")
    await callback.answer("OK")
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞ (—á–µ—Ä–µ–∑ POST /weather/forecast_by_city)
    data = await api_post("/weather/forecast_by_city", {"city": city})
    if data.get("success"):
        await callback.message.edit_text(data["formatted_message"])
    else:
        await callback.message.edit_text(data.get("error", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞"))

@router.callback_query()
async def show_weather_image_handler(callback: types.CallbackQuery):
    if callback.data.startswith(SHOW_IMAGE_CALLBACK):
        user_id = callback.from_user.id
        await callback.answer("OK")
        if callback.data.startswith(f"{SHOW_IMAGE_CALLBACK}:"):
            city = callback.data.split(":", 1)[1]
            image_bytes = await get_weather_image_by_city(city)
        else:
            image_bytes = await get_weather_image(user_id)
        if image_bytes:
            image_file = BufferedInputFile(image_bytes, filename="weather.png")
            try:
                await callback.message.edit_media(InputMediaPhoto(media=image_file))
            except Exception as e:
                await callback.message.answer_photo(image_file)
        else:
            await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ–≥–æ–¥—ã.")
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except Exception:
            pass

@router.callback_query()
async def log_any_callback(callback: types.CallbackQuery):
    rich_print(f"[green]Callback: {callback.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}[/green]")
    await callback.answer("OK") 