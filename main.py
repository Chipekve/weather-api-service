from fastapi import FastAPI, HTTPException, Depends, Response
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Optional, List, Dict, Any
import uvicorn
import os
from dotenv import load_dotenv
import aiohttp
import asyncio
import logging
import sqlite3
from weather_image import generate_weather_image

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Weather Bot API",
    description="API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–≥–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class WeatherRequest(BaseModel):
    user_id: Optional[int] = None
    city: Optional[str] = None
    city_id: Optional[str] = None
    forecast_days: Optional[int] = None

class CitySearchRequest(BaseModel):
    query: str

class WeatherResponse(BaseModel):
    success: bool
    formatted_message: Optional[str] = None
    raw_data: Optional[Dict[str, Any]] = None
    error: Optional[str] = None

class CitySearchResponse(BaseModel):
    success: bool
    cities: Optional[List[Dict[str, Any]]] = None
    error: Optional[str] = None

class CityListResponse(BaseModel):
    cities: List[Dict[str, Any]]
    has_next: bool

class CityWeatherRequest(BaseModel):
    city: str

# === –†–∞–±–æ—Ç–∞ —Å –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
DB_PATH = os.getenv("USERS_DB_PATH", "data/users.db")

def get_db_connection():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = get_db_connection()
    conn.execute(
        """
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            city_id INTEGER
        )
        """
    )
    conn.commit()
    conn.close()

init_db()

def set_user_city(user_id: int, city_id: int):
    conn = get_db_connection()
    conn.execute(
        "INSERT OR REPLACE INTO users (user_id, city_id) VALUES (?, ?)",
        (user_id, city_id)
    )
    conn.commit()
    conn.close()

def get_user_city(user_id: int) -> Optional[int]:
    conn = get_db_connection()
    cur = conn.execute(
        "SELECT city_id FROM users WHERE user_id = ?",
        (user_id,)
    )
    row = cur.fetchone()
    conn.close()
    return row["city_id"] if row else None

# === –ú–æ–¥–µ–ª–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ ===
class UserStartRequest(BaseModel):
    user_id: int

class CitySearchRequestV2(BaseModel):
    user_id: int
    query: str
    page: int = 1
    page_size: int = 5

class UserCityRequest(BaseModel):
    user_id: int
    city_id: int
    city_name: Optional[str] = None

class SimpleMessageResponse(BaseModel):
    message: str

class StartInfoResponse(BaseModel):
    text: str
    image_url: str

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")
WEATHER_API_BASE_URL = "http://api.weatherapi.com/v1"
API_BASE_URL = os.getenv("API_BASE_URL", "http://0.0.0.0:8000")
HOST = os.getenv("HOST", "0.0.0.0")
PORT = int(os.getenv("PORT", "8000"))

IMGUR_URL = "https://imgur.com/vT8VBK5.jpg"
WELCOME_TEXT = (
    "<b>–ù–ê —Ç—É–¥–∞üëâüèºüëàüèº</b> —Å–∏–ª—å–Ω–æ –ø–æ—Ö–æ–∂ –Ω–∞ <b>–ù–ê –∫—É–¥–∞üëÄ</b>\n"
    "–¢–æ–ª—å–∫–æ –ª–æ–≥–∏–∫–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ –≤–µ–±-—Å–µ—Ä–≤–∏—Å –Ω–∞ FastAPI\n\n"
    "–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –∏ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É.\n\n"
    "–û —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /help"
)

if not WEATHER_API_KEY:
    logger.critical("WEATHER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WeatherAPI
async def fetch_weather_api(
    city: Optional[str] = None,
    city_id: Optional[str] = None,
    retries: int = 3,
    forecast_days: Optional[int] = None,
) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –æ—Ç WeatherAPI"""
    if not city and not city_id:
        return None

    params = {
        "key": WEATHER_API_KEY,
        "lang": "ru",
        "q": f"id:{city_id}" if city_id else city,
    }

    endpoint = "current.json"
    if forecast_days:
        endpoint = "forecast.json"
        params["days"] = forecast_days

    for attempt in range(retries):
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{WEATHER_API_BASE_URL}/{endpoint}", params=params
                ) as response:
                    if response.status == 200:
                        return await response.json()
                    logger.warning(f"WeatherAPI –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ WeatherAPI –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
        await asyncio.sleep(1)
    return None

async def search_cities_api(query: str, retries: int = 3) -> Optional[List[Dict[str, Any]]]:
    """–ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤ —á–µ—Ä–µ–∑ WeatherAPI"""
    if len(query) < 2:
        return None

    for attempt in range(retries):
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{WEATHER_API_BASE_URL}/search.json",
                    params={"key": WEATHER_API_KEY, "q": query},
                ) as response:
                    if response.status == 200:
                        return await response.json()
                    logger.warning(f"–ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤ –Ω–µ —É–¥–∞–ª—Å—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {response.status}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
        await asyncio.sleep(1)
    return None

# –§—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∏–∑ –±–æ—Ç–∞)
async def format_weather(weather: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã"""
    wind_m_s = round(weather["current"]["wind_kph"] / 3.6, 1)
    return (
        f"üå§ –ü–æ–≥–æ–¥–∞ –≤ <b>{weather['location']['name']}</b>:\n"
        f"‚Ä¢ üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{weather['current']['temp_c']}¬∞C</b>\n"
        f"‚Ä¢ ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: <b>{weather['current']['feelslike_c']}¬∞C</b>\n"
        f"‚Ä¢ üí® –í–µ—Ç–µ—Ä: <b>{wind_m_s} –º/—Å</b>\n"
        f"‚Ä¢ üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: <b>{weather['current']['humidity']}%</b>\n"
        f"‚Ä¢ ‚òÅÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ: <b>{weather['current']['condition']['text']}</b>"
    )

async def format_forecast(weather: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã"""
    location = weather.get("location", {})
    forecast_days = weather.get("forecast", {}).get("forecastday", [])

    if not location or not forecast_days:
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑."

    text = f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 3 –¥–Ω—è –¥–ª—è <b>{location.get('name')}</b>:\n\n"

    for day in forecast_days:
        date = day.get("date")
        day_info = day.get("day", {})
        condition = day_info.get("condition", {}).get("text", "")
        max_temp = day_info.get("maxtemp_c")
        min_temp = day_info.get("mintemp_c")
        text += (
            f"<b>{date}</b>:\n"
            f"  ‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {condition}\n"
            f"  ‚Ä¢ –ú–∞–∫—Å: {max_temp}¬∞C, –ú–∏–Ω: {min_temp}¬∞C\n\n"
        )
    return text

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã API
@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {"message": "Weather Bot API —Ä–∞–±–æ—Ç–∞–µ—Ç! üå§Ô∏è"}

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {"status": "healthy", "api_key_configured": bool(WEATHER_API_KEY)}

@app.post("/weather", response_model=WeatherResponse)
async def get_weather_by_user(request: UserStartRequest):
    city_id = get_user_city(request.user_id)
    if not city_id:
        return WeatherResponse(success=False, error="–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥")
    weather_data = await fetch_weather_api(city_id=str(city_id))
    if not weather_data:
        return WeatherResponse(success=False, error="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ")
    formatted_message = await format_weather(weather_data)
    return WeatherResponse(success=True, formatted_message=formatted_message, raw_data=weather_data)

@app.post("/cities/search", response_model=CitySearchResponse)
async def search_cities(request: CitySearchRequest):
    """–ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤"""
    try:
        cities = await search_cities_api(request.query)
        
        if cities:
            return CitySearchResponse(success=True, cities=cities)
        else:
            return CitySearchResponse(
                success=False, 
                error="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥–∞"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ—Ä–æ–¥–æ–≤: {e}")
        return CitySearchResponse(
            success=False, 
            error="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        )

@app.get("/weather/current/{city}")
async def get_current_weather(city: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –ø–æ –≥–æ—Ä–æ–¥—É (GET –∑–∞–ø—Ä–æ—Å)"""
    try:
        weather_data = await fetch_weather_api(city=city)
        
        if weather_data:
            formatted_message = await format_weather(weather_data)
            return WeatherResponse(
                success=True, 
                formatted_message=formatted_message,
                raw_data=weather_data
            )
        else:
            raise HTTPException(status_code=404, detail="–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è {city}: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@app.get("/weather/forecast/{city}")
async def get_weather_forecast(city: str, days: int = 3):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –ø–æ –≥–æ—Ä–æ–¥—É (GET –∑–∞–ø—Ä–æ—Å)"""
    try:
        weather_data = await fetch_weather_api(city=city, forecast_days=days)
        
        if weather_data:
            formatted_message = await format_forecast(weather_data)
            return WeatherResponse(
                success=True, 
                formatted_message=formatted_message,
                raw_data=weather_data
            )
        else:
            raise HTTPException(status_code=404, detail="–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {city}: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@app.post("/user/start", response_model=StartInfoResponse)
async def user_start(request: UserStartRequest):
    return StartInfoResponse(text=WELCOME_TEXT, image_url=IMGUR_URL)

@app.post("/city/search", response_model=CityListResponse)
async def city_search(request: CitySearchRequestV2):
    cities = await search_cities_api(request.query)
    if not cities:
        return {"cities": [], "has_next": False}
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    start = (request.page - 1) * request.page_size
    end = start + request.page_size
    page_cities = cities[start:end]
    has_next = end < len(cities)
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è: id, name, country
    result = [{"id": c["id"], "name": c["name"], "country": c.get("country", "")} for c in page_cities]
    return {"cities": result, "has_next": has_next}

@app.post("/user/city", response_model=SimpleMessageResponse)
async def user_city(request: UserCityRequest):
    set_user_city(request.user_id, request.city_id)
    return {"message": f"–ì–æ—Ä–æ–¥ –≤—ã–±—Ä–∞–Ω!"}

@app.post("/weather/by_city", response_model=WeatherResponse)
async def get_weather_by_city(request: CityWeatherRequest):
    weather_data = await fetch_weather_api(city=request.city)
    if not weather_data:
        return WeatherResponse(success=False, error="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ")
    formatted_message = await format_weather(weather_data)
    return WeatherResponse(success=True, formatted_message=formatted_message, raw_data=weather_data)

@app.post("/weather/forecast_by_city", response_model=WeatherResponse)
async def get_forecast_by_city(request: CityWeatherRequest):
    weather_data = await fetch_weather_api(city=request.city, forecast_days=3)
    if not weather_data:
        return WeatherResponse(success=False, error="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
    formatted_message = await format_forecast(weather_data)
    return WeatherResponse(success=True, formatted_message=formatted_message, raw_data=weather_data)

@app.post("/weather/image")
async def weather_image(request: UserStartRequest):
    city_id = get_user_city(request.user_id)
    if not city_id:
        return Response(content="–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", media_type="text/plain", status_code=400)
    weather_data = await fetch_weather_api(city_id=str(city_id))
    if not weather_data:
        return Response(content="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã", media_type="text/plain", status_code=500)
    city_name = weather_data.get("location", {}).get("name", "–ì–æ—Ä–æ–¥")
    buf = generate_weather_image(weather_data, city_name)
    return Response(content=buf.read(), media_type="image/png")

@app.post("/weather/image_by_city")
async def weather_image_by_city(request: CityWeatherRequest):
    weather_data = await fetch_weather_api(city=request.city)
    if not weather_data:
        return Response(content="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã", media_type="text/plain", status_code=500)
    buf = generate_weather_image(weather_data, request.city)
    return Response(content=buf.read(), media_type="image/png")

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host=HOST,
        port=PORT,
        reload=True,
        log_level="info"
    ) 